/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CALL = 6;
  /** RegularExpression Id. */
  int VAN = 7;
  /** RegularExpression Id. */
  int HOST = 8;
  /** RegularExpression Id. */
  int PLEDGE = 9;
  /** RegularExpression Id. */
  int REAR = 10;
  /** RegularExpression Id. */
  int SCOUT = 11;
  /** RegularExpression Id. */
  int AT = 12;
  /** RegularExpression Id. */
  int AS = 13;
  /** RegularExpression Id. */
  int CLAIM = 14;
  /** RegularExpression Id. */
  int WHERE = 15;
  /** RegularExpression Id. */
  int ALL = 16;
  /** RegularExpression Id. */
  int LBRACE = 17;
  /** RegularExpression Id. */
  int RBRACE = 18;
  /** RegularExpression Id. */
  int LPAR = 19;
  /** RegularExpression Id. */
  int RPAR = 20;
  /** RegularExpression Id. */
  int LSQUARE = 21;
  /** RegularExpression Id. */
  int RSQUARE = 22;
  /** RegularExpression Id. */
  int DOUBLECOLON = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int SEMICOLON = 25;
  /** RegularExpression Id. */
  int INT = 26;
  /** RegularExpression Id. */
  int STRING = 27;
  /** RegularExpression Id. */
  int BOOLEAN = 28;
  /** RegularExpression Id. */
  int ASSIGNATION = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int MULT = 32;
  /** RegularExpression Id. */
  int DIV = 33;
  /** RegularExpression Id. */
  int LESSTHAN = 34;
  /** RegularExpression Id. */
  int MORETHAN = 35;
  /** RegularExpression Id. */
  int EQUALS = 36;
  /** RegularExpression Id. */
  int NOTEQUALS = 37;
  /** RegularExpression Id. */
  int WRITE = 38;
  /** RegularExpression Id. */
  int READ = 39;
  /** RegularExpression Id. */
  int CHARGE = 40;
  /** RegularExpression Id. */
  int WHILE = 41;
  /** RegularExpression Id. */
  int DO = 42;
  /** RegularExpression Id. */
  int FOR = 43;
  /** RegularExpression Id. */
  int SEPARATOR = 44;
  /** RegularExpression Id. */
  int IF = 45;
  /** RegularExpression Id. */
  int ELSE = 46;
  /** RegularExpression Id. */
  int OR = 47;
  /** RegularExpression Id. */
  int AND = 48;
  /** RegularExpression Id. */
  int NOT = 49;
  /** RegularExpression Id. */
  int NUMBER = 50;
  /** RegularExpression Id. */
  int ID = 51;
  /** RegularExpression Id. */
  int DOUBLEQUOTED = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "\"call banners\"",
    "\"van\"",
    "\"host\"",
    "\"pledge\"",
    "\"rear\"",
    "\"Scout\"",
    "\"At\"",
    "\"As\"",
    "\"Claim\"",
    "\"Where\"",
    "\"all\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\",\"",
    "\";\"",
    "\"int\"",
    "\"String\"",
    "\"boolean\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"Write\"",
    "\"Read\"",
    "\"Charge\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"|\"",
    "\"if\"",
    "\"else\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "<NUMBER>",
    "<ID>",
    "<DOUBLEQUOTED>",
  };

}
