/* Generated By:JJTree&JavaCC: Do not edit this line. Syntax.java */
import java.io.*;
import java.util.*;

public class Syntax/*@bgen(jjtree)*/implements SyntaxTreeConstants, SyntaxConstants {/*@bgen(jjtree)*/
  protected static JJTSyntaxState jjtree = new JJTSyntaxState();public static Hashtable ST = new Hashtable();

        public static void main(String[] args) throws ParseException
        {
        String temp;
        STC temp2;

                try
                {
                        Syntax syntaxAnalizer = new Syntax(System.in);
            SimpleNode root = syntaxAnalizer.Program();
            System.out.println("Syntax is correct.");
            System.out.println();
            System.out.println("Abstract Syntax Tree:");
            root.dump(" ");
            System.out.println();
            System.out.println("Symbol Table:");
            Enumeration t = ST.keys();

            while (t.hasMoreElements())
            {
                temp = (String)t.nextElement();
                temp2 = (STC)ST.get(temp);
                System.out.println(temp);
                if (temp2.type != null)
                {
                    System.out.println(" type = " + temp2.type);
                }

                if (temp2.value != null)
                {
                    System.out.println(" value = " + temp2.value);
                }
            }

            System.out.println();
            System.out.println("Program:");
            PrintVisitor pv = new PrintVisitor();
            root.jjtAccept(pv, null);

            System.out.println();
            System.out.println("Type Checking:");
            TypeCheckVisitor tc = new TypeCheckVisitor();
            root.jjtAccept(tc, ST);
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("There are errors in the syntax.");
                }
        }

//======================================================================================================================
//                                                          //SYMBOL TABLE

//  TOKEN       |   RES. WORD   |   KIND
//-----------------------------------------
//  CALL        |   call banners|   1
//  VAN         |   van         |   2
//  HOST        |   host        |   3
//  PLEDGE      |   pledge      |   4
//  REAR        |   rear        |   5
//  SCOUT       |   Scout       |   6
//  AT          |   at          |   7
//  AS          |   as          |   8
//  CLAIM       |   Claim       |   9
//  WHERE       |   Where       |   10
//  ALL         |   all         |   11
//  LBRACE      |   {           |   12
//  RBRACE      |   }           |   13
//  LPAR        |   (           |   14
//  RPAR        |   )           |   15
//  LSQUARE     |   [           |   16
//  RSQUARE     |   ]           |   17
//  DOUBLECOLON |   :           |   18
//  COMMA       |   ,           |   19
//  SEMICOLON   |   ;           |   20
//  INT         |   int         |   21
//  STRING      |   String      |   22
//  BOOLEAN     |   boolean     |   23
//  ASSIGNATION |   <=          |   24
//  PLUS        |   +           |   25
//  MINUS       |   -           |   26
//  MULT        |   *           |   27
//  DIV         |   /           |   28
//  LESSTHAN    |   <           |   29
  static final public SimpleNode Program() throws ParseException {
 /*@bgen(jjtree) Program */
    ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      Banners();
      jj_consume_token(VAN);
      t = jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      Body();
      Methods();
      Rear();
      jj_consume_token(0);
     jjtn000.value = t.image;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Banners() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
      jj_consume_token(CALL);
      jj_consume_token(LBRACE);
      Declaration();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void Declaration() throws ParseException {
    SimpleDeclaration();
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case STRING:
    case BOOLEAN:
                                      ASTDeclaration jjtn001 = new ASTDeclaration(JJTDECLARATION);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        Declaration();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void SimpleDeclaration() throws ParseException {
    Token t;
    String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
      jj_consume_token(DOUBLECOLON);
      name = ID();
      ASTDecl jjtn001 = new ASTDecl(JJTDECL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
        jjtn001.value = t.image;
        ST.put(name, new STC("int", name));
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      jj_consume_token(DOUBLECOLON);
      name = ID();
      ASTDecl jjtn002 = new ASTDecl(JJTDECL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtc002 = false;
        jjtn002.value = t.image;
        ST.put(name, new STC("boolean", name));
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
      }
      }
      break;
    case STRING:
      t = jj_consume_token(STRING);
      jj_consume_token(DOUBLECOLON);
      name = ID();
      ASTDecl jjtn003 = new ASTDecl(JJTDECL);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
      jjtree.closeNodeScope(jjtn003,  1);
      jjtc003 = false;
        jjtn003.value = t.image;
        ST.put(name, new STC("String", name));
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Body() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case NOT:
    case NUMBER:
    case ID:
    case DOUBLEQUOTED:
      Statement();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  static final public void Statement() throws ParseException {
    SimpleStatement();
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case NOT:
    case NUMBER:
    case ID:
    case DOUBLEQUOTED:
                                      ASTStatement jjtn001 = new ASTStatement(JJTSTATEMENT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        Statement();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void SimpleStatement() throws ParseException {
    Expression();
  }

/*void S() #void :
{
    Token t;
}
{
	(((Variable() t = <ASSIGNATION>)((E()) | (<READ><LPAR><RPAR>)) <SEMICOLON>) | 
    (<WRITE><LPAR>E()<RPAR><SEMICOLON>) |
    ((<IF>E()B())(<ELSE>B())?) |
    (<WHILE>E()B()) |
    (<DO>B()<WHILE>E()) |
    (<READ><LPAR><RPAR><SEMICOLON>) |
    (<FOR><LPAR><ID><ASSIGNATION>E()<SEPARATOR>E()<RPAR>B()) |
    (<CHARGE><ID><LPAR><RPAR><SEMICOLON>))
    {jjtThis.value = t.image;}
}

void Variable() :
{
    Token t;
}
{
	t = <ID>((<LSQUARE>E()<RSQUARE>)*)
    {jjtThis.value = t.image;}
}*/
  static final public void Expression() throws ParseException {
    Token t;
    Term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        Term();
           ASTPLUS_op jjtn001 = new ASTPLUS_op(JJTPLUS_OP);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
        try {
           jjtree.closeNodeScope(jjtn001,  2);
           jjtc001 = false;
             jjtn001.value = t.image;
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
        }
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        Term();
           ASTMINUS_op jjtn002 = new ASTMINUS_op(JJTMINUS_OP);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
        try {
           jjtree.closeNodeScope(jjtn002,  2);
           jjtc002 = false;
             jjtn002.value = t.image;
        } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
        }
        break;
      case OR:
        t = jj_consume_token(OR);
        Term();
           ASTOR_op jjtn003 = new ASTOR_op(JJTOR_OP);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
        try {
           jjtree.closeNodeScope(jjtn003,  2);
           jjtc003 = false;
             jjtn003.value = t.image;
        } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Term() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
             ASTNOT_op jjtn001 = new ASTNOT_op(JJTNOT_OP);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        Factor();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  1);
             }
      }
      break;
    case LPAR:
    case NUMBER:
    case ID:
    case DOUBLEQUOTED:
      Factor();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
        case AND:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          t = jj_consume_token(MULT);
          Factor();
                                      ASTMULT_op jjtn002 = new ASTMULT_op(JJTMULT_OP);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
          try {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                      jjtc002 = false;
                                     jjtn002.value = t.image;
          } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
          }
          break;
        case DIV:
          t = jj_consume_token(DIV);
          Factor();
                          ASTDIV_op jjtn003 = new ASTDIV_op(JJTDIV_OP);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
          try {
                          jjtree.closeNodeScope(jjtn003,  2);
                          jjtc003 = false;
                         jjtn003.value = t.image;
          } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
          }
          break;
        case AND:
          t = jj_consume_token(AND);
          Factor();
                          ASTAND_op jjtn004 = new ASTAND_op(JJTAND_OP);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
          try {
                          jjtree.closeNodeScope(jjtn004,  2);
                          jjtc004 = false;
                         jjtn004.value = t.image;
          } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E() throws ParseException {
 /*@bgen(jjtree) Void */
    ASTVoid jjtn000 = new ASTVoid(JJTVOID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      ES();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
      case MORETHAN:
      case EQUALS:
      case NOTEQUALS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHAN:
          t = jj_consume_token(LESSTHAN);
          ES();
          break;
        case MORETHAN:
          t = jj_consume_token(MORETHAN);
          ES();
          break;
        case EQUALS:
          t = jj_consume_token(EQUALS);
          ES();
          break;
        case NOTEQUALS:
          t = jj_consume_token(NOTEQUALS);
          ES();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ES() throws ParseException {
    Token t;
    T();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case OR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        T();
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        T();
        break;
      case OR:
        t = jj_consume_token(OR);
        T();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void T() throws ParseException {
    Token t;
    f();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        t = jj_consume_token(MULT);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      case AND:
        t = jj_consume_token(AND);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f();
    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
              ASTExp jjtn001 = new ASTExp(JJTEXP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
      }
      jj_consume_token(RPAR);
      break;
    case NUMBER:
      Number();
      break;
    case ID:
      ID();
      break;
    case DOUBLEQUOTED:
      String();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String ID() throws ParseException {
 /*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.value = t.image;
             {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void String() throws ParseException {
 /*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DOUBLEQUOTED);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void f() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSQUARE:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_5;
        }
        jj_consume_token(LSQUARE);
        E();
        jj_consume_token(RSQUARE);
      }
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      E();
      jj_consume_token(RPAR);
      break;
    case DOUBLEQUOTED:
      t = jj_consume_token(DOUBLEQUOTED);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Methods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      Body();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLEDGE:
        jj_consume_token(PLEDGE);
        E();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void Rear() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAR:
      jj_consume_token(REAR);
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOUT:
        case CLAIM:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        Q();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void Q() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOUT:
      Sel();
      break;
    case CLAIM:
      Ins();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Sel() throws ParseException {
    jj_consume_token(SCOUT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(AT);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    jj_consume_token(WHERE);
    E();
    jj_consume_token(SEMICOLON);
  }

  static final public void Ins() throws ParseException {
    jj_consume_token(CLAIM);
    jj_consume_token(ID);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(AT);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    jj_consume_token(AS);
    E();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      E();
    }
    jj_consume_token(SEMICOLON);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x1c000000,0x1c000000,0x80000,0x80000,0xc0000000,0xc0000000,0x0,0x0,0x80000,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x80000,0x200000,0x80000,0x200,0x100,0x4800,0x400,0x4800,0x10000,0x1000000,0x1000000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1e0000,0x1e0000,0x8000,0x8000,0x10003,0x10003,0x1e0000,0x3c,0x3c,0x8000,0x8000,0x10003,0x10003,0x1c0000,0x0,0x1c0000,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Syntax(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Syntax(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Syntax(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Syntax(SyntaxTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
