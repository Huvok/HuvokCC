/* Generated By:JavaCC: Do not edit this line. Syntax.java */
class Syntax implements SyntaxConstants {
        public static void main(String[] args) throws ParseException
        {
                try
                {
                        Syntax syntaxAnalizer = new Syntax(System.in);
                        syntaxAnalizer.Program();
                        System.out.println("Syntax is correct");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("There are errors in the syntax.");
                }
        }

//======================================================================================================================
//                                                          //SYMBOL TABLE

//  TOKEN   |   RES. WORD   |   KIND
//  INT     |   int         |   21
  static final public void Program() throws ParseException {
    jj_consume_token(CALL);
           System.out.println("kind: " + token.kind);
  }

  static final public void Banners() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
      jj_consume_token(CALL);
      jj_consume_token(LBRACE);
      label_1:
      while (true) {
        Type();
        jj_consume_token(DOUBLECOLON);
        jj_consume_token(ID);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          jj_consume_token(ID);
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case NUM:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSQUARE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(LSQUARE);
        jj_consume_token(NUMBER);
        jj_consume_token(RSQUARE);
      }
      break;
    case STRING:
      jj_consume_token(STRING);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSQUARE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(LSQUARE);
        jj_consume_token(NUMBER);
        jj_consume_token(RSQUARE);
      }
      break;
    case NUM:
      jj_consume_token(NUM);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSQUARE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        jj_consume_token(LSQUARE);
        jj_consume_token(NUMBER);
        jj_consume_token(RSQUARE);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void B() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WRITE:
    case READ:
    case CHARGE:
    case WHILE:
    case DO:
    case FOR:
    case IF:
    case ID:
      label_6:
      while (true) {
        S();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
        case READ:
        case CHARGE:
        case WHILE:
        case DO:
        case FOR:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  static final public void S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Variable();
      jj_consume_token(ASSIGNATION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case NUMBER:
      case ID:
      case DOUBLEQUOTED:
        E();
        break;
      case READ:
        jj_consume_token(READ);
        jj_consume_token(LPAR);
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      break;
    case WRITE:
      jj_consume_token(WRITE);
      jj_consume_token(LPAR);
      E();
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      jj_consume_token(IF);
      E();
      B();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        B();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      E();
      B();
      break;
    case DO:
      jj_consume_token(DO);
      B();
      jj_consume_token(WHILE);
      E();
      break;
    case READ:
      jj_consume_token(READ);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LPAR);
      jj_consume_token(ID);
      jj_consume_token(ASSIGNATION);
      E();
      jj_consume_token(SEPARATOR);
      E();
      jj_consume_token(RPAR);
      B();
      break;
    case CHARGE:
      jj_consume_token(CHARGE);
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Variable() throws ParseException {
    jj_consume_token(ID);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(LSQUARE);
      E();
      jj_consume_token(RSQUARE);
    }
  }

  static final public void E() throws ParseException {
    ES();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESSTHAN:
    case MORETHAN:
    case EQUALS:
    case NOTEQUALS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        ES();
        break;
      case MORETHAN:
        jj_consume_token(MORETHAN);
        ES();
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        ES();
        break;
      case NOTEQUALS:
        jj_consume_token(NOTEQUALS);
        ES();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void ES() throws ParseException {
    T();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        T();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        T();
        break;
      case OR:
        jj_consume_token(OR);
        T();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void T() throws ParseException {
    f();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f();
    }
  }

  static final public void f() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSQUARE:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(LSQUARE);
        E();
        jj_consume_token(RSQUARE);
      }
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      E();
      jj_consume_token(RPAR);
      break;
    case DOUBLEQUOTED:
      jj_consume_token(DOUBLEQUOTED);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Methods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      B();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLEDGE:
        jj_consume_token(PLEDGE);
        E();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void Rear() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAR:
      jj_consume_token(REAR);
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOUT:
        case CLAIM:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
        Q();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void Q() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOUT:
      Sel();
      break;
    case CLAIM:
      Ins();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Sel() throws ParseException {
    jj_consume_token(SCOUT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(AT);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    jj_consume_token(WHERE);
    E();
    jj_consume_token(SEMICOLON);
  }

  static final public void Ins() throws ParseException {
    jj_consume_token(CLAIM);
    jj_consume_token(ID);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(AT);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    jj_consume_token(AS);
    E();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      E();
    }
    jj_consume_token(SEMICOLON);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0xe00000,0x2,0x10000,0x10000,0x10000,0xe00000,0x0,0x0,0x4000,0x0,0x0,0x10000,0xe0000000,0xe0000000,0x6000000,0x6000000,0x18000000,0x18000000,0x10000,0x4000,0x10,0x8,0x240,0x20,0x240,0x800,0x80000,0x80000,0x80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x217e,0x217e,0x7004,0x200,0x217e,0x0,0x1,0x1,0x400,0x400,0x800,0x800,0x0,0x7000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Syntax(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Syntax(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Syntax(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Syntax(SyntaxTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
