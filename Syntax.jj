/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Syntax.jj */
/*@egen*/options 
{
  IGNORE_CASE = false;
  OPTIMIZE_TOKEN_MANAGER = true;
               
                 
}

PARSER_BEGIN(Syntax)
    
import java.io.*;
import java.util.*;

public class Syntax/*@bgen(jjtree)*/implements SyntaxTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSyntaxState jjtree = new JJTSyntaxState();

/*@egen*/
    public static Hashtable ST = new Hashtable();
    
	public static void main(String[] args) throws ParseException
	{
        String temp;
        STC temp2;
        
		try
		{
			Syntax syntaxAnalizer = new Syntax(System.in);
            SimpleNode root = syntaxAnalizer.Program();
            System.out.println("Syntax is correct.");
            System.out.println();
            System.out.println("Abstract Syntax Tree:");
            root.dump(" ");
            System.out.println();
            System.out.println("Symbol Table:");
            Enumeration t = ST.keys();

            while (t.hasMoreElements())
            {
                temp = (String)t.nextElement();
                temp2 = (STC)ST.get(temp);
                System.out.println(temp);
                if (temp2.type != null)
                {
                    System.out.println(" type = " + temp2.type);
                }
                
                if (temp2.value != null)
                {
                    System.out.println(" value = " + temp2.value);
                }
            }
            
            System.out.println();
            System.out.println("Program:");
            PrintVisitor pv = new PrintVisitor();
            root.jjtAccept(pv, null);

            System.out.println();
            System.out.println("Type Checking:");
            TypeCheckVisitor tc = new TypeCheckVisitor();
            root.jjtAccept(tc, ST);    
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("There are errors in the syntax.");
		}
	}
}
PARSER_END(Syntax)
    
TOKEN_MGR_DECLS:
{
    static int linenumber = 0;
}

SKIP:
{
	" " |
    "\n" {linenumber++;}|
    "\r" |
    "\r\n" |
    "\t"
}

TOKEN:
{	
		<CALL: "call banners">{System.out.println("CALL -> " + image);}
	|	<VAN: "van">{System.out.println("VAN -> " + image);}
    |	<HOST: "host">{System.out.println("HOST -> " + image);}
    |	<PLEDGE: "pledge">{System.out.println("PLEDGE -> " + image);}
    |	<REAR: "rear">{System.out.println("REAR -> " + image);}
}

TOKEN:
{	
		<SCOUT: "Scout">{System.out.println("SCOUT -> " + image);}
	|	<AT: "At">{System.out.println("AT -> " + image);}
    |	<AS: "As">{System.out.println("AS -> " + image);}
    |	<CLAIM: "Claim">{System.out.println("CLAIM -> " + image);}
    |	<WHERE: "Where">{System.out.println("WHERE -> " + image);}
    |	<ALL: "all">{System.out.println("ALL -> " + image);}
}

TOKEN:
{	
		<LBRACE: "{">{System.out.println("LBRACE -> " + image);}
	|	<RBRACE: "}">{System.out.println("RBRACE -> " + image);}
	|	<LPAR: "(">{System.out.println("LPAR -> " + image);}
	|	<RPAR: ")">{System.out.println("RPAR -> " + image);}
    |	<LSQUARE: "[">{System.out.println("LSQUARE -> " + image);}
	|	<RSQUARE: "]">{System.out.println("RSQUARE -> " + image);}
	|	<DOUBLECOLON: ":">{System.out.println("DOUBLECOLON -> " + image);}
	|	<COMMA: ",">{System.out.println("COMMA -> " + image);}
	|	<SEMICOLON: ";">{System.out.println("SEMICOLON -> " + image);}
}

TOKEN:
{	
		<INT: "int">{System.out.println("INT -> " + image);}
    |	<STRING: "String">{System.out.println("STRING -> " + image);}
    |	<BOOLEAN: "boolean">{System.out.println("BOOLEAN -> " + image);}
}

TOKEN:
{	
		<ASSIGNATION: "<=">{System.out.println("ASSIGNATION -> " + image + "\r\n");}
	|	<PLUS: "+">{System.out.println("PLUS -> " + image);}
    |	<MINUS: "-">{System.out.println("MINUS -> " + image);}
    |	<MULT: "*">{System.out.println("MULT -> " + image);}
    |	<DIV: "/">{System.out.println("DIV -> " + image);}
    |	<LESSTHAN: "<">{System.out.println("LESSTHAN -> " + image);}
    |	<MORETHAN: ">">{System.out.println("MORETHAN -> " + image);}
    |	<EQUALS: "==">{System.out.println("EQUALS -> " + image);}
    |	<NOTEQUALS: "!=">{System.out.println("NOTEQUALS -> " + image);}
}

TOKEN:
{	
		<WRITE: "Write">{System.out.println("WRITE -> " + image);}
    |	<READ: "Read">{System.out.println("READ -> " + image);}
    |	<CHARGE: "Charge">{System.out.println("CHARGE -> " + image);}
}

TOKEN:
{	
		<WHILE: "while">{System.out.println("WHILE -> " + image);}
    |	<DO: "do">{System.out.println("DO -> " + image);}
    |	<FOR: "for">{System.out.println("FOR -> " + image);}
    |	<SEPARATOR: "|">{System.out.println("SEPARATOR -> " + image);}
    |	<IF: "if">{System.out.println("IF -> " + image);}
    |	<ELSE: "else">{System.out.println("ELSE -> " + image);}
    |	<OR: "||">{System.out.println("OR -> " + image);}
    |	<AND: "&&">{System.out.println("AND -> " + image);}
    |	<NOT: "!">{System.out.println("NOT -> " + image);}
}

TOKEN:
{	
		<NUMBER: (["0"-"9"])+>{System.out.println("Number -> " + image + "\r\n");}
	|	<ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println("ID -> " + image + "\r\n");}
}

TOKEN: 
{
        <DOUBLEQUOTED: "\"" ("\\" ~[] | ~["\"","\\"])*"\"">{System.out.println("DOUBLEQUOTED -> " + image + "\r\n");} 
}

//======================================================================================================================
//                                                          //SYMBOL TABLE

//  TOKEN       |   RES. WORD   |   KIND
//-----------------------------------------
//  CALL        |   call banners|   1
//  VAN         |   van         |   2
//  HOST        |   host        |   3
//  PLEDGE      |   pledge      |   4
//  REAR        |   rear        |   5
//  SCOUT       |   Scout       |   6
//  AT          |   at          |   7
//  AS          |   as          |   8
//  CLAIM       |   Claim       |   9
//  WHERE       |   Where       |   10
//  ALL         |   all         |   11
//  LBRACE      |   {           |   12
//  RBRACE      |   }           |   13
//  LPAR        |   (           |   14
//  RPAR        |   )           |   15
//  LSQUARE     |   [           |   16
//  RSQUARE     |   ]           |   17
//  DOUBLECOLON |   :           |   18
//  COMMA       |   ,           |   19
//  SEMICOLON   |   ;           |   20
//  INT         |   int         |   21
//  STRING      |   String      |   22
//  BOOLEAN     |   boolean     |   23
//  ASSIGNATION |   <=          |   24
//  PLUS        |   +           |   25
//  MINUS       |   -           |   26
//  MULT        |   *           |   27
//  DIV         |   /           |   28
//  LESSTHAN    |   <           |   29

SimpleNode Program() :
{/*@bgen(jjtree) Program */
    ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/ 
    Banners()<VAN> t = <ID><LPAR><RPAR>Body()Methods()Rear()<EOF>
    {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Banners()       :
{
}
{
	(<CALL><LBRACE>Declaration()<RBRACE>)?
}

void Declaration()       :
{
}
{
    (SimpleDeclaration()<SEMICOLON>[/*@bgen(jjtree) #Declaration( 2) */
                                    {
                                      ASTDeclaration jjtn001 = new ASTDeclaration(JJTDECLARATION);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/Declaration()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/                ])
}

void SimpleDeclaration()       : 
{
    Token t;
    String name;
}
{
    (t = <INT> <DOUBLECOLON> name = ID()/*@bgen(jjtree) #Decl( 1) */
    {
      ASTDecl jjtn001 = new ASTDecl(JJTDECL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
    }
/*@egen*/ 
    {
        jjtn001.value = t.image;
        ST.put(name, new STC("int", name));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
    }
/*@egen*/         ) | 
    (t = <BOOLEAN> <DOUBLECOLON> name = ID()/*@bgen(jjtree) #Decl( 1) */
    {
      ASTDecl jjtn002 = new ASTDecl(JJTDECL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtc002 = false;
    }
/*@egen*/ 
    {
        jjtn002.value = t.image;
        ST.put(name, new STC("boolean", name));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
      }
    }
/*@egen*/         ) | 
    (t = <STRING> <DOUBLECOLON> name = ID()/*@bgen(jjtree) #Decl( 1) */
    {
      ASTDecl jjtn003 = new ASTDecl(JJTDECL);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003,  1);
      jjtc003 = false;
    }
/*@egen*/ 
    {
        jjtn003.value = t.image;
        ST.put(name, new STC("String", name));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
    }
/*@egen*/         )
}

void Body()       :
{
}
{
	<LBRACE>(Statement())?<RBRACE>
}

void Statement()       :
{
}
{
    (SimpleStatement() <SEMICOLON> [/*@bgen(jjtree) #Statement( 2) */
                                    {
                                      ASTStatement jjtn001 = new ASTStatement(JJTSTATEMENT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/Statement()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/              ])
}

void SimpleStatement()       :
{
}
{
    Expression()
}

/*void S() #void :
{
    Token t;
}
{
	(((Variable() t = <ASSIGNATION>)((E()) | (<READ><LPAR><RPAR>)) <SEMICOLON>) | 
    (<WRITE><LPAR>E()<RPAR><SEMICOLON>) |
    ((<IF>E()B())(<ELSE>B())?) |
    (<WHILE>E()B()) |
    (<DO>B()<WHILE>E()) |
    (<READ><LPAR><RPAR><SEMICOLON>) |
    (<FOR><LPAR><ID><ASSIGNATION>E()<SEPARATOR>E()<RPAR>B()) |
    (<CHARGE><ID><LPAR><RPAR><SEMICOLON>))
    {jjtThis.value = t.image;}
}

void Variable() :
{
    Token t;
}
{
	t = <ID>((<LSQUARE>E()<RSQUARE>)*)
    {jjtThis.value = t.image;}
}*/

void Expression()       :
{
    Token t;
}
{
    Term()
    (
        (t = <PLUS> Term()/*@bgen(jjtree) #PLUS_op( 2) */
         {
           ASTPLUS_op jjtn001 = new ASTPLUS_op(JJTPLUS_OP);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn001,  2);
           jjtc001 = false;
         }
/*@egen*/
         {
             jjtn001.value = t.image;
         }/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/            ) |
        (t = <MINUS> Term()/*@bgen(jjtree) #MINUS_op( 2) */
         {
           ASTMINUS_op jjtn002 = new ASTMINUS_op(JJTMINUS_OP);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn002,  2);
           jjtc002 = false;
         }
/*@egen*/
         {
             jjtn002.value = t.image;
         }/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
           }
         }
/*@egen*/             ) |
        (t = <OR> Term()/*@bgen(jjtree) #OR_op( 2) */
         {
           ASTOR_op jjtn003 = new ASTOR_op(JJTOR_OP);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn003,  2);
           jjtc003 = false;
         }
/*@egen*/
         {
             jjtn003.value = t.image;
         }/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
         }
/*@egen*/          )
    )*
}

void Term()       :
{
    Token t;
}
{
    (<NOT>/*@bgen(jjtree) #NOT_op( 1) */
           {
             ASTNOT_op jjtn001 = new ASTNOT_op(JJTNOT_OP);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  1);
             }
           }
/*@egen*/           ) |
    (Factor() ((t = <MULT> Factor()/*@bgen(jjtree) #MULT_op( 2) */
                                    {
                                      ASTMULT_op jjtn002 = new ASTMULT_op(JJTMULT_OP);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                      jjtc002 = false;
                                    }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
                                    }
/*@egen*/            ) |
    (t = <DIV> Factor()/*@bgen(jjtree) #DIV_op( 2) */
                        {
                          ASTDIV_op jjtn003 = new ASTDIV_op(JJTDIV_OP);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003,  2);
                          jjtc003 = false;
                        }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
                        }
/*@egen*/           ) |
    (t = <AND> Factor()/*@bgen(jjtree) #AND_op( 2) */
                        {
                          ASTAND_op jjtn004 = new ASTAND_op(JJTAND_OP);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn004,  2);
                          jjtc004 = false;
                        }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
                        }
/*@egen*/           ))*)
}

void E()       :
{/*@bgen(jjtree) Void */
    ASTVoid jjtn000 = new ASTVoid(JJTVOID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Void */
        try {
/*@egen*/
	(ES())
    ((t = <LESSTHAN>ES()) |
    (t = <MORETHAN>ES()) |
    (t = <EQUALS>ES()) |
    (t = <NOTEQUALS>ES()))?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ES()       :
{
    Token t;
}
{
	T()((t = <PLUS>T()) | (t = <MINUS>T()) | (t = <OR>T()))*
}

void T()      :
{
    Token t;
}
{
	f()((t = <MULT> | t = <DIV> | t = <AND>)f())*
}
              
void Factor()       :
{
}
{
    (<LPAR>/*@bgen(jjtree) #Exp( 1) */
            {
              ASTExp jjtn001 = new ASTExp(JJTEXP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/         <RPAR> |
    Number() |
    ID() |
    String())
}
              
void Number() :
{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
              
String ID() :
{/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ID */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image;
             return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
              
void String() :
{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
    try {
/*@egen*/
    t = <DOUBLEQUOTED>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
              
void f()      :
{
    Token t;
}
{
	((t = <ID>(((<LSQUARE>E()<RSQUARE>)*) | (<LPAR><RPAR>)))|
    t = <NUMBER>|
    (<LPAR>E()<RPAR>)|
    (t = <DOUBLEQUOTED>))
}

void Methods()       :
{
}
{
    ((<HOST><ID><LPAR><RPAR>Body())
    (<PLEDGE>E())?)?
}

void Rear()       :
{
}
{
    (<REAR><ID><LPAR><RPAR><LBRACE>((Q())*)<RBRACE>)?
}

void Q()       :
{
}
{
    (Sel()|Ins())
}

void Sel()       :
{
}
{
    <SCOUT>(<ALL>|<ID>)(<COMMA><ID>)*<SEMICOLON><AT><ID><SEMICOLON><WHERE>E()<SEMICOLON>
}

void Ins()       :
{
}
{
    <CLAIM><ID>(<COMMA><ID>)*<SEMICOLON><AT><ID><SEMICOLON><AS>E()(<COMMA>E())*<SEMICOLON>
}